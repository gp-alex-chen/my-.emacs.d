;; Object emacs-lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "emacs-lisp/"
  :tables
  (list
    (semanticdb-table "byte-run.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("macro-declaration-function" variable (:default-value (function macro-declaration-function)) nil [1239 1571])
            ("defalias" code nil nil [1573 2715])
            ("defun-declarations-alist" variable (:default-value (list (list (quote advertised-calling-convention) (function (lambda (f _args arglist when) (list (quote set-advertised-calling-convention) (list (quote quote) f) (list (quote quote) arglist) (list (quote quote) when))))) (list (quote obsolete) (function (lambda (f _args new-name when) (list (quote make-obsolete) (list (quote quote) f) (list (quote quote) new-name) (list (quote quote) when))))) (list (quote compiler-macro) (function (lambda (f args compiler-function) (\` (eval-and-compile (put (quote (\, f)) (quote compiler-macro) (\, (if (eq (car-safe compiler-function) (quote lambda)) (\` (lambda (\, (append (cadr compiler-function) args)) (\,@ (cddr compiler-function)))) (\` (function (\, compiler-function))))))))))) (list (quote doc-string) (function (lambda (f _args pos) (list (quote put) (list (quote quote) f) (quote (quote doc-string-elt)) (list (quote quote) pos))))) (list (quote indent) (function (lambda (f _args val) (list (quote put) (list (quote quote) f) (quote (quote lisp-indent-function)) (list (quote quote) val))))))) nil [2912 4524])
            ("macro-declarations-alist" variable (:default-value (cons (list (quote debug) (function (lambda (name _args spec) (list (quote progn) :autoload-end (list (quote put) (list (quote quote) name) (quote (quote edebug-form-spec)) (list (quote quote) spec)))))) defun-declarations-alist)) nil [4526 5153])
            ("put" code nil nil [5155 5188])
            ("put" code nil nil [5189 5228])
            ("defalias" code nil nil [5229 6948])
            ("defun" function (:arguments ("name" "arglist" "docstring" "body")) nil [6997 9374])
            ("fset" code nil nil [9480 9501])
            ("defsubst" function (:arguments ("name" "arglist" "body")) nil [10512 10983])
            ("advertised-signature-table" variable (:default-value (make-hash-table :test (quote eq) :weakness (quote key))) nil [10985 11063])
            ("set-advertised-calling-convention" function (:arguments ("function" "signature" "_when")) nil [11065 11435])
            ("make-obsolete" function (:arguments ("obsolete-name" "current-name" "when")) nil [11437 12330])
            ("define-obsolete-function-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [12332 13149])
            ("make-obsolete-variable" function (:arguments ("obsolete-name" "current-name" "when" "access-type")) nil [13151 13982])
            ("define-obsolete-variable-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [13985 15680])
            ("define-obsolete-face-alias" function (:arguments ("obsolete-face" "current-face" "when")) nil [16010 16396])
            ("dont-compile" function (:arguments ("body")) nil [16398 16707])
            ("eval-when-compile" function (:arguments ("body")) nil [16950 17311])
            ("eval-and-compile" function (:arguments ("body")) nil [17313 17691])
            ("with-no-warnings" function (:arguments ("body")) nil [17693 17901])
            ("make-obsolete-variable" code nil nil [19196 19305])
            ("make-obsolete" code nil nil [19306 19397]))          
      :file "byte-run.el.gz"
      :pointmax 19425
      :fsize 5834
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "package.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [7137 7154])
            ("tabulated-list" include nil nil [7157 7182])
            ("package" customgroup (:user-visible-flag t) nil [7184 7284])
            ("package-enable-at-startup" variable (:default-value t) nil [7301 7744])
            ("package-load-list" variable (:default-value (quote (all))) nil [7746 8490])
            ("Info-directory-list" variable nil nil [8492 8520])
            ("declare-function" code nil nil [8521 8565])
            ("declare-function" code nil nil [8566 8624])
            ("declare-function" code nil nil [8625 8673])
            ("declare-function" code nil nil [8674 8734])
            ("package-archives" variable (:default-value (quote (("gnu" . "http://elpa.gnu.org/packages/")))) nil [8736 9487])
            ("package-pinned-packages" variable nil nil [9489 10618])
            ("package-archive-version" variable
               (:constant-flag t
                :default-value 1)
                nil [10620 10792])
            ("package-archive-contents" variable nil nil [10857 11053])
            ("put" code nil nil [11054 11109])
            ("package-user-dir" variable (:default-value (locate-user-emacs-file "elpa")) nil [11111 11431])
            ("package-directory-list" variable (:default-value (let (result) (dolist (f load-path) (and (stringp f) (equal (file-name-nondirectory f) "site-lisp") (push (expand-file-name "elpa" f) result))) (nreverse result))) nil [11433 12028])
            ("package-check-signature" variable (:default-value (if (progn (require (quote epg-config)) (executable-find epg-gpg-program)) (quote allow-unsigned))) nil [12030 12568])
            ("package-unsigned-archives" variable nil nil [12570 12772])
            ("package--default-summary" variable (:default-value "No description available.") nil [12774 12835])
            ("cl-defstruct" code nil nil [12837 15563])
            ("package-desc-full-name" function (:arguments ("pkg-desc")) nil [15583 15747])
            ("package-desc-suffix" function (:arguments ("pkg-desc")) nil [15749 15915])
            ("package-desc--keywords" function (:arguments ("pkg-desc")) nil [15917 16115])
            ("cl-defstruct" code nil nil [16191 16350])
            ("package--builtins" variable nil nil [16352 16698])
            ("put" code nil nil [16699 16747])
            ("package-alist" variable nil nil [16749 17182])
            ("put" code nil nil [17183 17227])
            ("package-activated-list" variable nil nil [17229 17384])
            ("put" code nil nil [17385 17438])
            ("package-version-join" function (:arguments ("vlist")) nil [17440 18411])
            ("package-load-descriptor" function (:arguments ("pkg-dir")) nil [18413 19074])
            ("package-load-all-descriptors" function nil nil [19076 19786])
            ("package-disabled-p" function (:arguments ("pkg-name" "version")) nil [19788 20517])
            ("package-activate-1" function (:arguments ("pkg-desc")) nil [20519 21609])
            ("package-built-in-p" function (:arguments ("package" "min-version")) nil [21611 22215])
            ("package--from-builtin" function (:arguments ("bi-desc")) nil [22217 22471])
            ("package-activate" function (:arguments ("package" "force")) nil [22714 24179])
            ("define-package" function (:arguments ("_name-string" "_version-string" "_docstring" "_requirements" "_extra-properties")) nil [24181 24829])
            ("package-process-define-package" function (:arguments ("exp" "origin")) nil [24831 25724])
            ("package-autoload-ensure-default-file" function (:arguments ("file")) nil [25781 26427])
            ("generated-autoload-file" variable nil nil [26429 26461])
            ("version-control" variable nil nil [26462 26486])
            ("package-generate-autoloads" function (:arguments ("name" "pkg-dir")) nil [26488 26948])
            ("tar-parse-info" variable nil nil [26950 26973])
            ("declare-function" code nil nil [26974 27023])
            ("declare-function" code nil nil [27024 27084])
            ("declare-function" code nil nil [27085 27150])
            ("package-untar-buffer" function (:arguments ("dir")) nil [27152 27978])
            ("package-generate-description-file" function (:arguments ("pkg-desc" "pkg-file")) nil [27980 29004])
            ("package--alist-to-plist-args" function (:arguments ("alist")) nil [29006 29364])
            ("package-unpack" function (:arguments ("pkg-desc")) nil [29366 30605])
            ("package--make-autoloads-and-stuff" function (:arguments ("pkg-desc" "pkg-dir")) nil [30607 31099])
            ("package--compile" function (:arguments ("pkg-desc")) nil [31101 31274])
            ("package--write-file-no-coding" function (:arguments ("file-name")) nil [31276 31443])
            ("package--with-work-buffer" function (:arguments ("location" "file" "body")) nil [31445 32313])
            ("package--archive-file-exists-p" function (:arguments ("location" "file")) nil [32315 32575])
            ("declare-function" code nil nil [32577 32749])
            ("declare-function" code nil nil [32750 32825])
            ("declare-function" code nil nil [32826 32919])
            ("declare-function" code nil nil [32920 32982])
            ("declare-function" code nil nil [32983 33040])
            ("declare-function" code nil nil [33041 33101])
            ("package--check-signature" function (:arguments ("location" "file")) nil [33103 34530])
            ("package-install-from-archive" function (:arguments ("pkg-desc")) nil [34532 36059])
            ("package--initialized" variable nil nil [36061 36094])
            ("package-installed-p" function (:arguments ("package" "min-version")) nil [36096 36581])
            ("package-compute-transaction" function (:arguments ("packages" "requirements" "seen")) nil [36583 40397])
            ("package-read-from-string" function (:arguments ("str")) nil [40399 40870])
            ("package--read-archive-file" function (:arguments ("file")) nil [40872 41471])
            ("package-read-all-archive-contents" function nil nil [41473 41736])
            ("package-read-archive-contents" function (:arguments ("archive")) nil [41738 42263])
            ("cl-defstruct" code nil nil [42427 42640])
            ("package--add-to-archive-contents" function (:arguments ("package" "archive")) nil [42642 44195])
            ("package-download-transaction" function (:arguments ("packages")) nil [44197 44538])
            ("package-install" function
               (:user-visible-flag t
                :arguments ("pkg"))
                nil [44555 45669])
            ("package-strip-rcs-id" function (:arguments ("str")) nil [45671 46043])
            ("declare-function" code nil nil [46045 46103])
            ("package--prepare-dependencies" function (:arguments ("deps")) nil [46105 46797])
            ("package-buffer-info" function nil nil [46799 48337])
            ("declare-function" code nil nil [48339 48399])
            ("declare-function" code nil nil [48400 48455])
            ("package-tar-file-info" function nil nil [48457 49527])
            ("package-install-from-buffer" function (:user-visible-flag t) nil [49545 50268])
            ("package-install-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [50285 50602])
            ("package-delete" function (:arguments ("pkg-desc")) nil [50604 51518])
            ("package-archive-base" function (:arguments ("desc")) nil [51520 51668])
            ("package--download-one-archive" function (:arguments ("archive" "file")) nil [51670 53118])
            ("declare-function" code nil nil [53120 53214])
            ("declare-function" code nil nil [53215 53267])
            ("declare-function" code nil nil [53268 53333])
            ("package-import-keyring" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [53350 54075])
            ("package-refresh-contents" function (:user-visible-flag t) nil [54092 55052])
            ("package-initialize" function
               (:user-visible-flag t
                :arguments ("no-activate"))
                nil [55069 55536])
            ("describe-package" function
               (:user-visible-flag t
                :arguments ("package"))
                nil [55589 56880])
            ("describe-package-1" function (:arguments ("pkg")) nil [56882 63551])
            ("package-install-button-action" function (:arguments ("button")) nil [63553 63863])
            ("package-keyword-button-action" function (:arguments ("button")) nil [63865 64025])
            ("package-make-button" function (:arguments ("text" "props")) nil [64027 64496])
            ("package-menu-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap "Package"))) (set-keymap-parent map tabulated-list-mode-map) (define-key map "" (quote package-menu-describe-package)) (define-key map "u" (quote package-menu-mark-unmark)) (define-key map "" (quote package-menu-backup-unmark)) (define-key map "d" (quote package-menu-mark-delete)) (define-key map "i" (quote package-menu-mark-install)) (define-key map "U" (quote package-menu-mark-upgrades)) (define-key map "r" (quote package-menu-refresh)) (define-key map "f" (quote package-menu-filter)) (define-key map "~" (quote package-menu-mark-obsolete-for-deletion)) (define-key map "x" (quote package-menu-execute)) (define-key map "h" (quote package-menu-quick-help)) (define-key map "?" (quote package-menu-describe-package)) (define-key map [menu-bar package-menu] (cons "Package" menu-map)) (define-key menu-map [mq] (quote (menu-item "Quit" quit-window :help "Quit package selection"))) (define-key menu-map [s1] (quote ("--"))) (define-key menu-map [mn] (quote (menu-item "Next" next-line :help "Next Line"))) (define-key menu-map [mp] (quote (menu-item "Previous" previous-line :help "Previous Line"))) (define-key menu-map [s2] (quote ("--"))) (define-key menu-map [mu] (quote (menu-item "Unmark" package-menu-mark-unmark :help "Clear any marks on a package and move to the next line"))) (define-key menu-map [munm] (quote (menu-item "Unmark Backwards" package-menu-backup-unmark :help "Back up one line and clear any marks on that package"))) (define-key menu-map [md] (quote (menu-item "Mark for Deletion" package-menu-mark-delete :help "Mark a package for deletion and move to the next line"))) (define-key menu-map [mi] (quote (menu-item "Mark for Install" package-menu-mark-install :help "Mark a package for installation and move to the next line"))) (define-key menu-map [mupgrades] (quote (menu-item "Mark Upgradable Packages" package-menu-mark-upgrades :help "Mark packages that have a newer version for upgrading"))) (define-key menu-map [s3] (quote ("--"))) (define-key menu-map [mf] (quote (menu-item "Filter Package List..." package-menu-filter :help "Filter package selection (q to go back)"))) (define-key menu-map [mg] (quote (menu-item "Update Package List" revert-buffer :help "Update the list of packages"))) (define-key menu-map [mr] (quote (menu-item "Refresh Package List" package-menu-refresh :help "Download the ELPA archive"))) (define-key menu-map [s4] (quote ("--"))) (define-key menu-map [mt] (quote (menu-item "Mark Obsolete Packages" package-menu-mark-obsolete-for-deletion :help "Mark all obsolete packages for deletion"))) (define-key menu-map [mx] (quote (menu-item "Execute Actions" package-menu-execute :help "Perform all the marked actions"))) (define-key menu-map [s5] (quote ("--"))) (define-key menu-map [mh] (quote (menu-item "Help" package-menu-quick-help :help "Show short key binding help for package-menu-mode"))) (define-key menu-map [mc] (quote (menu-item "Describe Package" package-menu-describe-package :help "Display information about this package"))) map)) nil [64525 67753])
            ("package-menu--new-package-list" variable nil nil [67755 67874])
            ("define-derived-mode" code nil nil [67876 68609])
            ("package--push" function (:arguments ("pkg-desc" "status" "listname")) nil [68611 68979])
            ("package-list-unversioned" variable nil nil [68981 69095])
            ("package-list-unsigned" variable nil nil [69097 69212])
            ("package-desc-status" function (:arguments ("pkg-desc")) nil [69214 70651])
            ("package-menu--refresh" function (:arguments ("packages" "keywords")) nil [70653 72373])
            ("package-all-keywords" function nil nil [72375 72665])
            ("package--mapc" function (:arguments ("function" "packages")) nil [72667 73912])
            ("package--has-keyword-p" function (:arguments ("desc" "keywords")) nil [73914 74333])
            ("package-menu--generate" function (:arguments ("remember-pos" "packages" "keywords")) nil [74335 75135])
            ("package-menu--print-info" function (:arguments ("pkg")) nil [75137 76560])
            ("package-menu-refresh" function (:user-visible-flag t) nil [76562 76933])
            ("package-menu-describe-package" function
               (:user-visible-flag t
                :arguments ("button"))
                nil [76935 77290])
            ("package-menu-mark-delete" function
               (:user-visible-flag t
                :arguments ("_num"))
                nil [77318 77581])
            ("package-menu-mark-install" function
               (:user-visible-flag t
                :arguments ("_num"))
                nil [77583 77835])
            ("package-menu-mark-unmark" function
               (:user-visible-flag t
                :arguments ("_num"))
                nil [77837 77999])
            ("package-menu-backup-unmark" function (:user-visible-flag t) nil [78001 78163])
            ("package-menu-mark-obsolete-for-deletion" function (:user-visible-flag t) nil [78165 78456])
            ("package-menu-quick-help" function (:user-visible-flag t) nil [78458 78637])
            ("define-obsolete-function-alias" code nil nil [78639 78741])
            ("package-menu-get-status" function nil nil [78743 78916])
            ("package-menu--find-upgrades" function nil nil [78918 79813])
            ("package-menu-mark-upgrades" function (:user-visible-flag t) nil [79815 80834])
            ("package-menu-execute" function
               (:user-visible-flag t
                :arguments ("noquery"))
                nil [80836 82768])
            ("package-menu--version-predicate" function (:arguments ("A" "B")) nil [82770 82990])
            ("package-menu--status-predicate" function (:arguments ("A" "B")) nil [82992 83618])
            ("package-menu--description-predicate" function (:arguments ("A" "B")) nil [83620 83809])
            ("package-menu--name-predicate" function (:arguments ("A" "B")) nil [83811 83953])
            ("package-menu--archive-predicate" function (:arguments ("A" "B")) nil [83955 84094])
            ("list-packages" function
               (:user-visible-flag t
                :arguments ("no-fetch"))
                nil [84111 85696])
            ("defalias" code nil nil [85713 85761])
            ("package-show-package-list" function
               (:user-visible-flag t
                :arguments ("packages" "keywords"))
                nil [85784 86455])
            ("package-menu-filter" function
               (:user-visible-flag t
                :arguments ("keyword"))
                nil [86570 86868])
            ("package-list-packages-no-fetch" function (:user-visible-flag t) nil [86870 87096])
            ("package" package nil nil [87098 87116]))          
      :file "package.el.gz"
      :pointmax 87143
      :fsize 23085
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 7154 . 7155) (symbol 7119 . 7136) (open-paren 7118 . 7119))))
  :file "!usr!share!emacs!24.5!lisp!emacs-lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
