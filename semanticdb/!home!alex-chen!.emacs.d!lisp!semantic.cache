;; Object lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "lisp/"
  :tables
  (list
    (semanticdb-table "init-youdao.el"
      :tags 
        '( ("url-automatic-caching t" setq nil nil [1 31])
            ("(kbd \"M-i\") 'youdao-dictionary-search" global-set-key nil nil [32 86])
            ("init-youdao" package nil nil [87 109]))          
      :file "init-youdao.el"
      :fsize 109
      :lastmodtime '(22448 4902 552102 910000))
    (semanticdb-table "init-elpa.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("package" include nil nil [1 19])
            ("package-initialize" code nil nil [20 40])
            ("setq" code nil nil [316 467])
            ("require-package" function (:arguments ("package" "min-version" "no-refresh")) nil [491 980])
            ("cl" include nil nil [1140 1153])
            ("my/packages" variable (:default-value (quote (auto-complete auto-complete-clang company ace-jump-mode ag async chinese-fonts-setup color-theme dash expand-region flycheck iedit helm helm-projectile helm-ag htmlize hungry-delete smex lispy helm-swoop helm-ls-git smartparens nodejs-repl popwin org-pomodoro window-numbering powerline git-gutter multiple-cursors solarized-theme magit darcula-theme ox-latex-chinese youdao-dictionary))) nil [1155 1865])
            ("setq" code nil nil [1867 1911])
            ("my/packages-installed-p" function nil nil [1913 2053])
            ("unless" code nil nil [2055 2268])
            ("init-elpa" package nil nil [2269 2289]))          
      :file "init-elpa.el"
      :pointmax 2291
      :fsize 2508
      :lastmodtime '(22456 17583 87995 797000)
      :unmatched-syntax nil)
    (semanticdb-table "init-window-numbering.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("window-numbering-mode" code nil nil [1 26])
            ("powerline" include nil nil [27 47])
            ("powerline-default-theme" code nil nil [48 73])
            ("init-window-numbering" package nil nil [74 106]))          
      :file "init-window-numbering.el"
      :pointmax 107
      :fsize 106
      :lastmodtime '(22405 2986 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "init-theme-monokai.el"
      :major-mode 'emacs-lisp-mode
      :tags nil
      :file "init-theme-monokai.el"
      :pointmax 1
      :fsize 0
      :lastmodtime '(22405 2986 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "init-swiper.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("ivy-mode" code nil nil [1 13])
            ("ivy-use-virtual-buffers t" setq nil nil [14 46])
            ("(kbd \"C-x C-f\") 'counsel-find-file" global-set-key nil nil [81 132])
            ("init-swiper" package nil nil [257 279]))          
      :file "init-swiper.el"
      :pointmax 280
      :fsize 279
      :lastmodtime '(22405 2986 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "init-smex.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("smex" include nil nil [1 16])
            ("smex-initialize" code nil nil [17 34])
            ("(kbd \"M-x\") 'smex" global-set-key nil nil [35 69])
            ("(kbd \"M-X\") 'smex-major-mode-commands" global-set-key nil nil [70 124])
            ("(kbd \"C-c C-c M-x\") 'execute-extended-command" global-set-key nil nil [150 212])
            ("init-smex" package nil nil [213 233]))          
      :file "init-smex.el"
      :pointmax 234
      :fsize 233
      :lastmodtime '(22405 2986 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "init-smartparens.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("smartparens-config" include nil nil [1 30])
            ("smartparens-global-mode" code nil nil [31 58])
            ("init-smartparens" package nil nil [59 86]))          
      :file "init-smartparens.el"
      :pointmax 87
      :fsize 86
      :lastmodtime '(22405 2986 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "init-scheme.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cmuscheme" include nil nil [1 21])
            ("kh/get-scheme-proc-create" function nil nil [23 300])
            ("kh/scheme-send-last-sexp" function (:user-visible-flag t) nil [302 1157])
            ("scheme-program-name \"guile\"" setq nil nil [1159 1193])
            ("init-scheme" package nil nil [1194 1216]))          
      :file "init-scheme.el"
      :pointmax 1217
      :fsize 1216
      :lastmodtime '(22437 57991 574102 399000)
      :unmatched-syntax nil)
    (semanticdb-table "init-org.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1 15])
            ("org-agenda-files '(\"~/.emacs.d\")" setq nil nil [17 56])
            ("org-confirm-babel-evaluate nil" setq nil nil [58 95])
            ("org-capture-templates '((\"t\" \"TODO\" entry (file+headline \"~/.emacs.d/gtd.org\" \"工作安排\") 	 \"* TODO [#B] %?\\n %i\\n\" 	 :empty-lines 1))" setq nil nil [97 240])
            ("(kbd \"C-c r\") 'org-capture" global-set-key nil nil [242 285])
            ("geiser-default-implementation 'guile" setq nil nil [330 373])
            ("'org-mode-hook (lambda () (setq truncate-lines nil))" add-hook nil nil [375 438])
            ("org-startup-indented t" setq nil nil [440 469])
            ("org-babel-do-load-languages" code nil nil [471 626])
            ("org-src-fontify-natively t" setq nil nil [627 660])
            ("scheme-program-name \"guile\"" setq nil nil [663 697])
            ("org-image-actual-width '(600)" setq nil nil [708 744])
            ("ox-latex" include nil nil [755 774])
            ("ox-latex-chinese" include nil nil [775 802])
            ("oxlc/toggle-ox-latex-chinese" code nil nil [803 835])
            ("(boundp 'org-latex-classes)" unless nil nil [837 904])
            ("'org-latex-classes '(\"article\" \"\\\\documentclass{article}\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))" add-to-list nil nil [906 1298])
            ("org" include nil nil [1315 1329])
            ("htmlize" include nil nil [1330 1348])
            ("org-src-fontify-natively t" setq nil nil [1349 1382])
            ("org-use-sub-superscripts nil" setq-default nil nil [1393 1436])
            ("set-face-attribute" code nil nil [1448 1505])
            ("set-face-attribute" code nil nil [1506 1563])
            ("set-face-attribute" code nil nil [1564 1621])
            ("init-org" package nil nil [1623 1642]))          
      :file "init-org.el"
      :pointmax 1643
      :fsize 1686
      :lastmodtime '(22451 7978 276000 514000)
      :unmatched-syntax nil)
    (semanticdb-table "init-multiple-cursors.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("multiple-cursors" include nil nil [1 28])
            ("(kbd \"M-<mouse-1>\") 'mc/add-cursor-on-click" global-set-key nil nil [29 89])
            ("init-multiple-cursors" package nil nil [90 122]))          
      :file "init-multiple-cursors.el"
      :pointmax 123
      :fsize 122
      :lastmodtime '(22407 40960 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "init-js2mode.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("auto-mode-alist (append '((\"\\\\.js\\\\'\" . js2-mode)) auto-mode-alist)" setq nil nil [1 95])
            ("nodejs-repl" include nil nil [97 119])
            ("auto-mode-alist (append '((\"\\\\.html\\\\'\" . web-mode) 	 (\"\\\\.css\\\\'\" . web-mode) 	 ) auto-mode-alist)" setq nil nil [131 257])
            ("exec-path-from-shell-initialize" code nil nil [258 291])
            ("init-js2mode" package nil nil [292 315]))          
      :file "init-js2mode.el"
      :pointmax 316
      :fsize 319
      :lastmodtime '(22405 2986 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "init-helm.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("require-package" code nil nil [1 24])
            ("helm" include nil nil [25 40])
            ("helm-config" include nil nil [41 63])
            ("helm-swoop" include nil nil [64 85])
            ("helm-ls-git" include nil nil [86 108])
            ("projectile-global-mode" code nil nil [133 157])
            ("projectile-completion-system 'helm" setq nil nil [158 199])
            ("helm-projectile-on" code nil nil [200 220])
            ("helm-mode" code nil nil [222 235])
            ("helm-autoresize-mode" code nil nil [236 260])
            ("helm-ff-auto-update-initial-value nil" setq nil nil [271 315])
            ("(kbd \"M-y\") 'helm-show-kill-ring" global-set-key nil nil [358 407])
            ("(kbd \"C-c h\") 'helm-command-prefix" global-set-key nil nil [408 459])
            ("(kbd \"C-x b\") 'helm-mini" global-set-key nil nil [460 501])
            ("(kbd \"C-x C-f\") 'helm-find-files" global-set-key nil nil [502 551])
            ("(kbd \"C-s\") 'helm-swoop" global-set-key nil nil [552 592])
            ("(kbd \"C-h SPC\") 'helm-all-mark-rings" global-set-key nil nil [593 646])
            ("helm-map (kbd \"<tab>\") 'helm-execute-persistent-action" define-key nil nil [648 715])
            ("helm-map (kbd \"C-i\") 'helm-execute-persistent-action" define-key nil nil [754 819])
            ("helm-map (kbd \"C-z\")  'helm-select-action" define-key nil nil [849 903])
            ("helm-split-window-in-side-p           t" setq nil nil [930 1353])
            ("init-helm" package nil nil [1355 1375]))          
      :file "init-helm.el"
      :pointmax 1376
      :fsize 1395
      :lastmodtime '(22405 2986 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "init-git-gutter.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("global-git-gutter-mode" code nil nil [1 28])
            ("init-git-gutter" package nil nil [29 55]))          
      :file "init-git-gutter.el"
      :pointmax 56
      :fsize 55
      :lastmodtime '(22428 55976 29297 963000)
      :unmatched-syntax nil)
    (semanticdb-table "init-emacs-config.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("fset" code nil nil [40 69])
            ("show-paren-mode t" setq nil nil [84 108])
            ("show-paren-style 'parenthesis" setq nil nil [149 185])
            ("[f9] 'speedbar" global-set-key nil nil [206 237])
            ("inhibit-startup-message t" setq nil nil [255 287])
            ("tool-bar-mode" code nil nil [289 307])
            ("scroll-bar-mode" code nil nil [308 328])
            ("global-linum-mode" code nil nil [329 350])
            ("open-init-file" function nil nil [377 452])
            ("(kbd \"<f2>\") 'open-init-file" global-set-key nil nil [453 498])
            ("make-backup-files nil" setq nil nil [508 536])
            ("auto-save-default nil" setq nil nil [537 565])
            ("show-paren-mode" code nil nil [574 593])
            ("delete-selection-mode" code nil nil [604 629])
            ("global-hl-line-mode" code nil nil [642 665])
            ("dired-recursive-deletes 'always" setq nil nil [686 724])
            ("dired-recursive-copies 'always" setq nil nil [725 762])
            ("'dired-find-alternate-file 'disabled nil" put nil nil [781 827])
            ("with-eval-after-load" code nil nil [828 926])
            ("(kbd \"M-g\") 'goto-line" global-set-key nil nil [941 980])
            ("set-language-environment" code nil nil [998 1032])
            ("ispell-program-name \"aspell\"" setq-default nil nil [1068 1111])
            ("ispell-change-dictionary" code nil nil [1169 1208])
            ("initial-frame-alist (quote ((fullscreen . maximized)))" setq nil nil [1218 1279])
            ("(kbd \"C-=\") 'er/expand-region" global-set-key nil nil [1298 1344])
            ("init-emacs-config" package nil nil [1346 1374]))          
      :file "init-emacs-config.el"
      :pointmax 1375
      :fsize 1650
      :lastmodtime '(22451 5946 951956 435000)
      :unmatched-syntax nil)
    (semanticdb-table "init-custom.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("split-window-left/right2up/down" function (:user-visible-flag t) nil [1 438])
            ("split-window-up/down2left/right" function (:user-visible-flag t) nil [440 877])
            ("init-custom" package nil nil [879 901]))          
      :file "init-custom.el"
      :pointmax 902
      :fsize 1057
      :lastmodtime '(22456 12156 936006 809000)
      :unmatched-syntax nil)
    (semanticdb-table "init-auto-complete.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("auto-complete-config" include nil nil [1 32])
            ("global-auto-complete-mode" code nil nil [33 62])
            ("tab-always-indent 'complete" setq nil nil [88 122])
            ("ac-delay 0.08" setq nil nil [124 144])
            ("ac-auto-show-menu 0.08" setq nil nil [145 174])
            ("ac-use-menu-map t" setq nil nil [295 319])
            ("ac-menu-map \"\\C-n\" 'ac-next" define-key nil nil [340 380])
            ("ac-menu-map \"\\C-p\" 'ac-previous" define-key nil nil [381 425])
            ("init-auto-complete" package nil nil [575 604]))          
      :file "init-auto-complete.el"
      :pointmax 605
      :fsize 688
      :lastmodtime '(22405 2986 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "init-acg.el"
      :major-mode 'lisp-mode
      :tags 
        '( ("ace-jump-mode" include nil nil [1 25])
            ("(kbd \"M-j\") 'ace-jump-word-mode" global-set-key nil nil [26 74])
            ("init-acg" package nil nil [127 146]))          
      :file "init-acg.el"
      :pointmax 147
      :fsize 146
      :lastmodtime '(22406 19772 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "init-lispy.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("add-hook" code nil nil [1 34])
            ("add-hook" code nil nil [35 70])
            ("init-lispy" package nil nil [71 91]))          
      :file "init-lispy.el"
      :pointmax 92
      :fsize 92
      :lastmodtime '(22456 21358 179988 136000)
      :unmatched-syntax nil)
    (semanticdb-table ".#init-lispy.el"
      :major-mode 'emacs-lisp-mode
      :tags nil
      :file ".#init-lispy.el"
      :pointmax 1
      :fsize 43
      :lastmodtime '(22456 21397 495988 56000)
      :unmatched-syntax nil))
  :file "!home!alex-chen!.emacs.d!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
